#!/bin/sh

##############################################
# Copyright (c) 2008-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.
# Tinyrot script rotates specified files.
# It copies each log file to the $ARCHIVE_DIR, compreses it,
# and rotates it.  In addition, it make sure the achieved
# files to no exceed specified size
#
# Conf file /etc/tinyrot.conf has customizable settings
#
# file-conf Conf file specifies what files need to be rotated and
# the max size of files to save for each file
#
# Author: saileshr@lab126.com
##############################################

CONF=/etc/tinyrot.conf
[ -f $CONF ] && . $CONF

_FUNCTIONS=/etc/rc.d/functions
[ -f ${_FUNCTIONS} ] && . ${_FUNCTIONS}

UPTIME=`sed -e "s/ [0-9].*//;s/\([0-9]*\)\..*/\1/" < /proc/uptime`

PLAIN_SUFFIX="_??????????????"
ARCHIVE_SUFFIX=$PLAIN_SUFFIX".gz"
MESSAGES_LOG="/var/log/messages"


MSG_SLLVL_D="debug"
MSG_SLLVL_I="info"
MSG_SLLVL_W="warn"
MSG_SLLVL_E="err"
MSG_SLLVL_C="crit"
MSG_SLLVL_P="perf"
MSG_SLNUM_D=0
MSG_SLNUM_I=1
MSG_SLNUM_W=2
MSG_SLNUM_E=3
MSG_SLNUM_C=4
MSG_SLNUM_P=5
MSG_CUR_LVL=/var/local/system/syslog_level
msg()
{
        { [ "x$3" != "x" ] && str_id="$3:" ; } || str_id="def:"
        { [ "x$2" != "x" ] && msg_level="$2" ; } || msg_level="C"
        msg_sub=`basename $0`
        eval msg_sllvl=\${MSG_SLLVL_$msg_level}
        eval msg_slnum=\${MSG_SLNUM_$msg_level}
        { [ -e $MSG_CUR_LVL ] && curLvl=`cat $MSG_CUR_LVL` ; } || curLvl=1
        if [ $msg_slnum -ge $curLvl ]; then
                /usr/bin/logger -p local4.$msg_sllvl -t "system" "$msg_level $msg_sub:$str_id$1"
        fi
        [ "x$msg_level" != "xD" ] && echo "system: $msg_level $msg_sub:$str_id$1"
}

tmsg ()
{
        [ -n "$DEBUG" ] && echo "$*"
}

# given name (e.g. messages), return size in KiB of compressed archives

totalsize ()
{
        local TOTAL=0
        local F=$(ls ${1}_*${ARCHIVE_SUFFIX} 2>/dev/null)

        [ -n "$F" ] && TOTAL=$(du -sk $F | awk '{t+=$1} END {print t}')

        echo $TOTAL
}

init_aggr()
{
        ### Check nexttosend and get youngest
        if [ -f "$NEXT_FILE" ];  then N0=$(cat $NEXT_FILE); else N0=0; fi
        N1=`cat $1_$YOUNGEST_FILE`
        if [ ! -e $1_$AGGR_FILE ] || [ -n "${N0}" -a "${N1}" -eq "${N0}" ]; then
                echo -n $AGGR_COUNT > $1_$AGGR_FILE
                return 0
        else
                T1=`cat $1_$AGGR_FILE`
                T2=`echo $(($T1-1))`
                if [ ${T2} -le 1 ]; then
                        rm  $1_$AGGR_FILE
                else
                        echo -n "$T2" >  $1_$AGGR_FILE
                fi
                return 1
        fi
}

# Checks if maximum filesize of youngest rotated log file
# has been reached.  Returns zero if the youngest rotation
# file is unknown or maximum filesize has been reached.
# Returns one if youngest rotated file does not exist or
# is below filesize max (continue to rotate logs to this file).
init_filemaxsize()
{
        ### check if we have hit filesize max
        if [ ! -e $1_$YOUNGEST_FILE ]; then
                return 0
        fi

        YROTATION=`cat $1_$YOUNGEST_FILE`
        YFILE=$(echo $1_${YROTATION}${ARCHIVE_SUFFIX})
        if [ ! -e $YFILE ]; then
                return 1
        fi
        FSIZE=`stat -c %s $YFILE`
        KBSIZE=`expr $FSIZE / 1024`
        if [ $KBSIZE -ge $FILEMAXSIZE ]; then
                # we've hit the file size max, so don't aggregate
                msg ":Max file size hit $FILEMAXSIZE on $YFILE" I
                return 0
        else
                return 1
        fi
}

init_counter()
{
        if [ ! -e $1_$OLDEST_FILE ]; then
                echo -n "00000001" > $1_$OLDEST_FILE
                echo -n "00000001" > $1_$YOUNGEST_FILE
                OLDESTROTATION="00000001"
                YOUNGESTROTATION="00000001"
        else
                T1=`cat $1_${YOUNGEST_FILE}|sed 's/[0]*\(.*\)/\1/g'`
                T2=`echo $((($T1+1)%${MAXROT}))`
                if [ "x$2" != "xaggr" ]; then
                        YOUNGESTROTATION=`echo $T2 | awk '{ printf "%08d", $1 }'`
                else
                        YOUNGESTROTATION=`echo $T1 | awk '{ printf "%08d", $1 }'`
                fi
                echo -n "$YOUNGESTROTATION" > $1_$YOUNGEST_FILE
                OLDESTROTATION=`cat $1_$OLDEST_FILE`
        fi

}

remove_file()
{
        if [ -e $1_${OLDESTROTATION}${ARCHIVE_SUFFIX} ]; then
                msg "Removing $1_${OLDESTROTATION}_*.gz to save storage space" I
                rm -f $1_${OLDESTROTATION}${ARCHIVE_SUFFIX}
                T1=`echo $OLDESTROTATION|sed 's/[0]*\(.*\)/\1/g'`
                T2=`echo $((($T1+1)%${MAXROT}))`
                OLDESTROTATION=`echo $T2 | awk '{ printf "%08d", $1 }'`
                echo -n "$OLDESTROTATION" > $1_$OLDEST_FILE
        else
                # Calling while loop condition on ${DESTFILE}_*${ARCHIVE_SUFFIX} matched
                # but test above on $1_${OLDESTROTATION}${ARCHIVE_SUFFIX} does not: mismatch!
                # This happens if compressed logs were left behind and they add up to over 256K.
                # To avoid tinyrot from going into an infinite loop, as last resort, cleanup all!
                msg "Not found: $1_${OLDESTROTATION}_*.gz " W
                msg "Cleaning up any old logs matching ${DESTFILE}_*${ARCHIVE_SUFFIX}" W
                rm -f ${DESTFILE}_*${ARCHIVE_SUFFIX}
                # Reset any runaway value in OLDEST_FILE, but don't touch anything else:
                cat $1_$YOUNGEST_FILE > $1_$OLDEST_FILE
        fi
}

AGGR=0
rotate_file ()
{
        # If the file is empty, do nothing.
        if [ ! -s $FILE ]; then
                return
        fi

        DESTFILE=$ARCHIVE_DIR/`basename $FILE`

        # Cleanup any corrupted compressed files that are on disk.
        for corruptedFile in ${DESTFILE}_*${ARCHIVE_SUFFIX}.0; do
            test -e "$corruptedFile" || continue
            msg "Cleaning corrupted file: ${corruptedFile}" I
            rm -f "${corruptedFile}"
        done

        msg ":Rotating file $FILE with max size $MAXSIZE" I
        # initialize count-based (AGGR_COUNT) or size-based rotation
        if [ "x-" = "x${FILEMAXSIZE}" ]; then
                init_aggr $DESTFILE
        else
                init_filemaxsize $DESTFILE
        fi
        AGGR=$?
        if [ ${AGGR} != 0 ]; then
                init_counter $DESTFILE aggr
        else
                init_counter $DESTFILE donotaggr
        fi

        msg "Moving $FILE to $FILE.0" D
        # we move the file locally to preserve the (currently logging) inode,
        # then HUP syslog and wait till it starts the new file.

        if ! mv $FILE $FILE.0 >/dev/null 2>/dev/null; then
                msg ":Failed to move $FILE to $FILE.0" W
                return
        fi

        tmsg "$0 : Signaling syslog"
        pkill -HUP syslog-ng
        WAIT=0 ; while [ ! -f $MESSAGES_LOG -a $WAIT -lt 10 ]; do sleep 1 ; let WAIT++ ; done


        # Name of compressed dest file
        CDESTFILE=${DESTFILE}_${YOUNGESTROTATION}_`date +%Y%m%d%H%M%S`.gz
        # Temporary name of the compressed dest file. The compressed dest file
        # is written to disk first, then moved. If the device happens to
        # loose power before the temporary compressed dest file is written,
        # showlog and log uploads won't pick up the corrupted file.
        #
        # Corruption can still take place during the move, but since the move
        # is just an small inode change, the chance of a corrupted inode is
        # very small.
        TMP_CDESTFILE=${CDESTFILE}.0

        msg ":Compressing $FILE.0 to $TMP_CDESTFILE" D
        # The $(echo ...) turns the glob pattern into a concrete file name.
        # ${DESTFILE}_${YOUNGESTROTATION}${ARCHIVE_SUFFIX}.0 also matches
        # ${TEMP_CDESTFILE}, which we very much do not want to remove.  (We
        # also don't want zcat to pick it up, resulting in a loop.)

        # To recover from a bug, that can cause many YAGGR files to be created,
        # We find all of them, and discard all but the last.
        YAGGR_FILE=
        local f
        for f in ${DESTFILE}_${YOUNGESTROTATION}${ARCHIVE_SUFFIX}; do
                if [ -n "$YAGGR_FILE" ]; then
                        rm -f "$YAGGR_FILE"
                fi
                YAGGR_FILE=$f
        done

        if [ ${AGGR} != 0 -a -e ${YAGGR_FILE} ]; then
                zcat ${YAGGR_FILE} | cat - $FILE.0 | gzip > $TMP_CDESTFILE && \
                rm -f ${YAGGR_FILE}
        else
                # Copy the file and compress it
                gzip $FILE.0 -c >$TMP_CDESTFILE 2>/dev/null
        fi

        if [ $? != 0 ]; then
                msg ":Failed to gzip log file $FILE to $TMP_CDESTFILE" W
                return
        fi

        # Move the compressed .0 file to the final destination.
        msg "Moving $TMP_CDESTFILE to $CDESTFILE" D
        if ! mv $TMP_CDESTFILE $CDESTFILE >/dev/null 2>/dev/null; then
            rm -f $TMP_CDESTFILE
            msg ":Failed to move $TMP_CDESTFILE to $CDESTFILE" W
            return
        fi

        # Creating an empty file at the same location, with the same permissions
        touch $FILE
        chown $(stat -c '%U' $FILE.0):$(stat -c '%G' $FILE.0) $FILE

        # Delete the old file
        msg "Deleting $FILE.0" D
        rm -f $FILE.0

        # remove oldest file(s) if we exceed the max, but always keep at least one
        # N.B. that means fast log spew can overflow until the next aggregation boundary.
        # With aggregation @ 20 and tinyrot @ 15 min intervals, that's 5 hours.

        TOTAL=$(totalsize $DESTFILE)
        while [ $TOTAL -gt $MAXSIZE -a $(ls ${DESTFILE}_*${ARCHIVE_SUFFIX} | wc -l) -gt 1 ]; do
                remove_file $DESTFILE
                TOTAL=$(totalsize $DESTFILE)
        done
}

check_and_attempt_upload()
{
        local DESTFILE=$ARCHIVE_DIR/`basename $FILE`

        # If there is one or less archives, that means attempting to upload
        # will send "youngest" which is currently being written to. So there
        # is no need to try to send it.
        if [ $(ls ${DESTFILE}_*${ARCHIVE_SUFFIX} | wc -l) -lt 2 ]; then
                return
        fi

        # Otherwise check to see if we need an upload
        if [ -f "$NEXT_FILE" ]; then
                # strip leading 0's to ensure value is not interpreted as octal
                N_0=$(cat "$NEXT_FILE" | sed -e 's/^0*\([0-9]\{1,\}\)/\1/')
        else
                N_0=0
        fi
        N_1=$(cat "${DESTFILE}_$OLDEST_FILE" | sed -e 's/^0*\([0-9]\{1,\}\)/\1/')
        local TOTAL=$(totalsize $DESTFILE)
        # Set a threshold as 90% of max archive size
        local THRESHOLD=$(($MAXSIZE * 9 / 10))
        # Two scenarios to force an upload
        # 1. We are at 90% MAXSIZE and the next file to upload is the oldest
        # 2. Somehow next file to upload is older than oldest
        if [ $TOTAL -gt $THRESHOLD -a ${N_0} -eq ${N_1} ] || [ ${N_0} -le ${N_1} ]; then
                # send lipc cmd to upload all but youngest file.
                # This command if successful updates the nexttosendfile to youngest

                msg "Force upload oldest messages logs to avoid loss" I
                # Initiate log upload, 0 for non-anonymous logs
                lipc-set-prop com.lab126.logUploadDaemon initiateLogUpload 0 || true
        fi
}


############## START OF SCRIPT ######################

IFS=`echo -en "\n\b"`
# Bailing out when kicked off to close to boot time
if [ $UPTIME -lt $DEADZONE ]; then
        if ! [ "x$1" = "x--force" ]; then
                msg ":Still booting - not doing anything until later" W
                exit 0
        fi
fi


# wait up to 60 seconds for the lock

exec 9> $FLAG_TINYROT_LOCK

I=0; while [ $I -lt 60 ] && ! flock -n 9; do sleep 1 ; let I++ ; done

if [ $I -eq 60 ]; then
    if [ "x$1" != "x--force" ]; then
        exit 1
    else
        # could potentially end up with a pair of tinyrots killing
        # each other; still better than two running at once
        # kevinsh@ - what about showlog and the lock?

        OTHER_TINYROTS=$(ps -o pid h -C tinyrot | grep -v '^ *'$$'$')

        if [ -n "$OTHER_TINYROTS" ]; then
            msg ":tinyrot --force killing other tinyrots ($OTHER_TINYROTS)" W
            kill -9 $OTHER_TINYROTS
        fi

        I=0; while [ $I -lt 60 ] && ! flock -n 9; do sleep 1 ; let I++ ; done
        if [ $I -eq 60 ]; then
            msg ":tinyrot --force still unable to acquire lock; running anyway" W
        fi
    fi
fi

# Create the destination directory if it doesn't exist
if [ ! -e $ARCHIVE_DIR ]; then
        mkdir -p $ARCHIVE_DIR
fi

while read LINE; do
        COMMENT=`echo $LINE | sed '/^#/d'`
        if [ "x$COMMENT" != "x" ]; then
                FILE=`echo $LINE | sed 's/\(\S*\)\s\(\S*\)\s\(\S*\)/\1/'`
                MAXSIZE=`echo $LINE | sed 's/\(\S*\)\s\(\S*\)\s\(\S*\)/\2/'`
                FILEMAXSIZE=`echo $LINE | sed 's/\(\S*\)\s\(\S*\)\s\(\S*\)/\3/'`
                # Needs to be re-initialized, as its overwritten
                AGGR_FILE=aggregate
                rotate_file
                # if this is "messages", try to see if we need to kick off an upload
                # Also, we may not want to automatically send logs when full.
                # Instead we would want to let our rotate function delete the oldest logs
                # when memory is full. This automatic upload functionality can be toggled in
                # tinyrot.conf
                FBASENAME=$(echo $(basename $FILE))
                if [ "x$FBASENAME" = "xmessages" ] && [ -z "$UPLOAD_LOGS_WHEN_FULL" ]; then
                   check_and_attempt_upload
                fi
        fi
done < $FILES_CONF

# Sync before exiting
sync
