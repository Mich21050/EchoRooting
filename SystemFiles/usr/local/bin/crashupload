#!/bin/bash

# Dumps crash metadata and data to server

ERROR_LOG="/var/log/crashupload.log"
usage() { echo "crashupload: Invalid argument count" >> "$ERROR_LOG"; exit 1; }

if [ $# -ne 10 ]; then
    usage
fi

PROCESS=""
VERSION=""
CRASHTIME=""
CRASHTYPE=""
FILENAME=""
DUPCOUNT=1

while getopts ":p:v:t:c:f:" o; do
    case "${o}" in
        p)
            PROCESS=${OPTARG}
            ;;
        v)
            VERSION=${OPTARG}
            ;;
        t)
            CRASHTIME=${OPTARG}
            ;;
        c)
            CRASHTYPE=${OPTARG}
            ;;
        f)
            FILENAME=${OPTARG}
            ;;
        *)
            usage
            ;;
    esac
done

OSBUILD="$(cat /etc/ota_version | grep "^SOFTWARE_VERSION" | cut -d '=' -f 2)"
if [ -z "${OSBUILD}" ]; then
    echo "crashupload: Invalid os build type"  >> "$ERROR_LOG"
    exit 2
fi

if [ ! -f "${FILENAME}" ]; then
    echo "crashupload: Invalid filename"  >> "$ERROR_LOG"
    exit 2
fi

DESCRIPTOR="${PROCESS}-${OSBUILD}-${CRASHTIME}"

OUTFILE=/dev/stdout
CRASHFILESIZE=$(ls -l $FILENAME | awk '{print $5}')

# Write out the MFBS data
echo "" >> "$OUTFILE"
echo "MFBS/1.0 1" >> "$OUTFILE"
echo "Content-Type: Application/Raw" >> "$OUTFILE"
echo "Content-Length: $CRASHFILESIZE" >> "$OUTFILE"
echo "" >> "$OUTFILE"

# Do not write crash report metadata, pending server side support

# Write the core-dump
cat ${FILENAME} >> "$OUTFILE"

# The core dump will be deleted upon successful upload
