#!/usr/bin/env python
#
# llog.py
#
# Copyright (c) 2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# PROPRIETARY/CONFIDENTIAL
#
# Use is subject to license terms.
#
"""@package llog.py
Implements a simple logging formatter consistent with the Kindle logging format standards.

Usage:

import llog
llog.initlog('testmodule')
llog.info('source', 'eventName', 'additionalMessage', k=1, q="abcdef")

would generate the following line in /var/log/messages:

yymmdd:hhmmss testmodule I source:eventname:k=1,q='abcdef':additionalmessage:



"""
import os
import time

# ----------------------------------------------------------------------------------
# Constants
# ----------------------------------------------------------------------------------

DEBUG, INFO, WARN, ERROR, CRITICAL, PERF = range(6)

LEVEL_IDS = {DEBUG: "D", INFO: "I", WARN: "W", ERROR: "E", CRITICAL: "C", PERF: "P"}


# ----------------------------------------------------------------------------------
# Internal Utilities
# ----------------------------------------------------------------------------------


"""class llog
Implements a simple logging formatter consistent with the Kindle logging format standards.
An llog instance contains an open file to append to, the path to that file, and a loglevel.
The should be only one instance of llog at a time in any given program.
"""
class _llog:
    def __init__(self, modulename, loglevel=None, filepath=None):
        """constructor
        requires a modulename, allows optional specification of a target file path and an
        initial logging level. Defaults to WARN logging level and /var/log/messages target
        if no specific log file target is requested.
        """
        self.modulename = modulename
        if loglevel == None:
            self.loglevel = INFO
        else:
            self.loglevel = loglevel
        if filepath:
            self.filepath = filepath
        else:
            self.filepath = "/var/log/messages"
        self.open(self.filepath)


    def _format(self, level, source, event, message, *ignoredNonKeywordArgs, **metadata):
        """_format
        Main formatter for log messages. Accepts keyword arguments as well as varargs.
        All non-keyword varargs are added as message segments, and all keyword varmessages
        are added as a single final segment of the message.
        """
        # format current time
        timestr = time.strftime("%y%m%d:%H%M%S", time.gmtime())
        pidstr = repr(os.getpid())

        # combine with level, module, source
        result = "%s %s[%s] %s %s:%s:" % (timestr, self.modulename, pidstr, LEVEL_IDS[level], source, event)

        # add keyword args as a single final segment
        if metadata:
            metadatastr = ""
            for p in metadata.keys():
                if metadatastr:
                    metadatastr +=","
                metadatastr += "%s=%s" % (p, repr(metadata[p]))
            result += metadatastr

        # add message as final segment
        result += ":%s" % message
        result += "\n"
        return result

    def log(self, level, source, message, *ignoredNonKeywordArgs, **metadata):
        """
        Logs an event, formatting it appropriately and then immediately writing and
        flushing it to the current log file
        """
        if self.logfile and level >= self.loglevel:
            msg = self._format(level, source, message,*ignoredNonKeywordArgs, **metadata)
            self.logfile.write(msg)
            self.logfile.flush()

    def setLogLevel(self, newlevel):
        """
        sets the logging level to the new value, one of
        llog.DEBUG, llog.INFO, llog.WARN, llog.ERROR, llog.CRITICAL, llog.PERF
        """
        self.loglevel = newlevel

    def close(self):
        """
        safely flushes and closes the current log file
        """
        if self.logfile:
            self.logfile.flush()
            self.logfile.close()
            self.logfile = None

    def open(self,filepath):
        """
        opens the new logfile, safely closing the old if one exists
        """
        if self.filepath != filepath:
            self.close()
        self.filepath = filepath
        try:
            self.logfile = open(self.filepath,"a")
        except:
            self.filepath = None
            self.logfile = None

_llog_singleton = None


# ----------------------------------------------------------------------------------
# External API
# ----------------------------------------------------------------------------------


def initlog(modulename):
    """
    """
    global _llog_singleton
    _llog_singleton = _llog(modulename)

def setLogLevel(level):
    """
    sets the logging level to the new value, one of
    llog.DEBUG, llog.INFO, llog.WARN, llog.ERROR, llog.CRITICAL, llog.PERF
    """
    _llog_singleton.setLogLevel(level)

def debug(source, event, message, *ignoredNonKeywordArgs, **metadata):
    """
    log an event at llog.DEBUG level
    """
    _llog_singleton.log(DEBUG, source, event, message, *ignoredNonKeywordArgs, **metadata)

def info(source, event, message, *ignoredNonKeywordArgs, **metadata):
    """
    log an event at llog.INFO level
    """
    _llog_singleton.log(INFO, source, event, message, *ignoredNonKeywordArgs, **metadata)

def warn(source, event, message, *ignoredNonKeywordArgs, **metadata):
    """
    log an event at llog.WARN level
    """
    _llog_singleton.log(WARN, source, event, message, *ignoredNonKeywordArgs, **metadata)

def error(source, event, message, *ignoredNonKeywordArgs, **metadata):
    """
    log an event at llog.ERROR level
    """
    _llog_singleton.log(ERROR, source, event, message, *ignoredNonKeywordArgs, **metadata)

def critical(source, event, message, *ignoredNonKeywordArgs, **metadata):
    """
    log an event at llog.CRITICAL level
    """
    _llog_singleton.log(CRITICAL, source, event, message, *ignoredNonKeywordArgs, **metadata)

def perf(source, event, message, *ignoredNonKeywordArgs, **metadata):
    """
    log an event at llog.PERF level
    """
    _llog_singleton.log(PERF, source, event, message, *ignoredNonKeywordArgs, **metadata)

def log(level, source, event, message, *ignoredNonKeywordArgs, **metadata):
    """
    log an event at llog.PERF level
    """
    _llog_singleton.log(level, source, event, message, *ignoredNonKeywordArgs, **metadata)


def close():
    """
    safely flushes and closes the current log file
    """
    _llog_singleton.close()


# ----------------------------------------------------------------------------------
# Simple Use Example
# ----------------------------------------------------------------------------------

if __name__ == '__main__':
    initlog('testmodule')
    setLogLevel(DEBUG)
    debug("testSource", "testevent", "WoW!", arg1=3,arg2='thrall')
    info("testSource", "testevent", "WoW!",arg1=3,arg2='is')
    warn("testSource", "testevent", "WoW!",arg1=3,arg2='a great')
    error("testSource", "testevent", "WoW!",arg1=3,arg2='orcish')
    critical("testSource", "testevent", "WoW!",arg1=3,arg2='shaman')
    perf("testSource", "testevent", "WoW!",arg1=3,arg2='eh what?')
